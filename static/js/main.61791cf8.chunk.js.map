{"version":3,"sources":["store/index.ts","api/api.ts","components/InputComponents/SelectInput.tsx","components/InputComponents/TextInput.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","DELETE_TODO","SELECTED_USERID","SETUSER","setSelectedUserId","id","type","payload","getTodos","state","todos","getSelectedUserId","selectedUserId","getUser","user","initialState","store","createStore","action","filter","todo","composeWithDevTools","BASE_URL","request","url","options","fetch","then","response","json","data","Error","status","statusText","SelectInput","memo","name","label","inputValue","errorMessage","onChange","className","htmlFor","classNames","value","map","option","TextInput","placeholder","TodoList","dispatch","useDispatch","useSelector","useState","title","setTitle","selectedOption","setSelectedOption","useEffect","todosFromServer","loadTodos","eraseTodo","todoId","method","removeTodo","deleteTodo","filteredTodos","useMemo","toLowerCase","includes","completed","event","target","checked","readOnly","userId","onClick","CurrentUser","person","setUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61791cf8.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo } from '../types/todo';\nimport { User } from '../types/user';\n\n// Action types - is just a constant. MUST have a unique value.\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SELECTED_USERID = 'SELECTED_USERID';\nconst SETUSER = 'SETUSER';\n\n// Action creators - a function returning an action object\nexport const loadTodos = (todos: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload: todos,\n});\n\nexport const deleteTodo = (todoId: number) => ({\n  type: DELETE_TODO,\n  payload: todoId,\n});\n\nexport const setSelectedUserId = (id: number) => ({\n  type: SELECTED_USERID,\n  payload: id,\n});\n\nexport const setUser = (user: User) => ({\n  type: SETUSER,\n  payload: user,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\nexport const getUser = (state: RootState) => state.user;\n\n// Initial state\nexport type RootState = {\n  todos: Todo[];\n  selectedUserId: number;\n  user: User | null;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  selectedUserId: 0,\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    case SELECTED_USERID:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case SETUSER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { Todo } from '../types/todo';\nimport { User } from '../types/user';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json())\n    .then(data => {\n      if (data.Error) {\n        throw new Error(`${data.status} - ${data.statusText}`);\n      }\n\n      return data;\n    });\n};\n\nexport const fetchTodos = (): Promise<Todo[]> => request('/todos');\nexport const fetchUser = (userId: number): Promise<User> => request(`/users/${userId}`);\nexport const removeTodo = (todoId: number) => request(`/todos/${todoId}`, {\n  method: 'DELETE',\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Option {\n  id: number,\n  name: string,\n}\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  options: Option[],\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const SelectInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, options, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor=\"todo\" className=\"label\">\n        {label}\n        <div className=\"control\">\n          <div className={classNames('select', { 'is-danger': errorMessage })}>\n            <select\n              id={name}\n              name={name}\n              value={inputValue}\n              onChange={onChange}\n            >\n              {options.map(option => (\n                <option key={option.id} value={option.name}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  placeholder: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const TextInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, placeholder, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name={name}\n            id={name}\n            placeholder={placeholder}\n            className={classNames('input', { 'is-danger': errorMessage })}\n            value={inputValue}\n            onChange={onChange}\n          />\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import classNames from 'classnames';\nimport {\n  FC, useEffect, useMemo, useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTodos, removeTodo } from '../../api/api';\nimport {\n  deleteTodo,\n  getSelectedUserId, getTodos, loadTodos, setSelectedUserId,\n} from '../../store';\nimport { SelectInput } from '../InputComponents/SelectInput';\nimport { TextInput } from '../InputComponents/TextInput';\nimport './todoList.scss';\n\nexport const TodoList: FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  const [title, setTitle] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  useEffect(() => {\n    fetchTodos().then(todosFromServer => {\n      dispatch(loadTodos(todosFromServer));\n    });\n  }, []);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const eraseTodo = (todoId: number) => {\n    removeTodo(todoId).then(id => {\n      if (id) {\n        dispatch(deleteTodo(todoId));\n      }\n    });\n  };\n\n  const options = [\n    { id: 1, name: 'all' },\n    { id: 2, name: 'active' },\n    { id: 3, name: 'completed' },\n  ];\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return todo.completed === false;\n          case 'completed':\n            return todo.completed === true;\n          case 'all':\n          default:\n            return todo;\n        }\n      })\n  ), [todos, title, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"title\">Todos:</h2>\n\n      <TextInput\n        name=\"title\"\n        label=\"\"\n        inputValue={title}\n        errorMessage=\"\"\n        placeholder=\"Search by title\"\n        onChange={handleInputChange}\n      />\n\n      <SelectInput\n        name=\"filter\"\n        label=\"\"\n        inputValue={selectedOption}\n        errorMessage=\"\"\n        options={options}\n        onChange={handleSelectChange}\n      />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => dispatch(setSelectedUserId(todo.userId))}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"TodoList__user-button\"\n                  type=\"button\"\n                  onClick={() => eraseTodo(todo.id)}\n                >\n                  {`Delete #${todo.id}`}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUser } from '../../api/api';\nimport {\n  getSelectedUserId, getUser, setSelectedUserId, setUser,\n} from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = memo(() => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUser);\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  useEffect(() => {\n    fetchUser(selectedUserId)\n      .then(person => dispatch(setUser(person)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => dispatch(setSelectedUserId(0))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport 'bulma';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getSelectedUserId } from './store';\n\nconst App = () => {\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}