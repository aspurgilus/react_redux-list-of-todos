{"version":3,"sources":["store/types.ts","store/index.ts","api/api.ts","store/actions.ts","store/selectors.ts","components/InputComponents/SelectInput.tsx","components/InputComponents/TextInput.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionsType","initialState","todos","selectedUserId","user","store","createStore","state","action","type","LoadTodos","payload","DeleteTodo","filter","todo","id","SelectUserId","LoadUser","composeWithDevTools","BASE_URL","request","endpoint","options","fetch","then","response","json","data","Error","status","statusText","selectUserIdAction","todosSelector","selectedUserIdSelector","userSelector","SelectInput","memo","name","label","inputValue","errorMessage","onChange","className","htmlFor","classNames","value","map","option","TextInput","placeholder","TodoList","dispatch","useDispatch","useSelector","useState","title","setTitle","selectedOption","setSelectedOption","useEffect","todosFromServer","eraseTodo","todoId","method","removeTodo","filteredTodos","useMemo","toLowerCase","includes","completed","event","target","checked","readOnly","userId","onClick","CurrentUser","person","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9ddbedc.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\nimport { Todo } from '../types/todo';\nimport { User } from '../types/user';\n\nexport interface RootState {\n  todos: Todo[],\n  selectedUserId: number;\n  user: User | null;\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionsType {\n  LoadTodos = 'loadTodos',\n  DeleteTodo = 'deleteTodo',\n  SelectUserId = 'selectUserId',\n  LoadUser = 'loadUser',\n}\n\nexport type LoadTodosAction = Action<ActionsType.LoadTodos, Todo[]>;\nexport type RemoveTodoAction = Action<ActionsType.DeleteTodo, number>;\nexport type SelectUserIdAction = Action<ActionsType.SelectUserId, number>;\nexport type LoadUserAction = Action<ActionsType.LoadUser, User>;\n\nexport type Actions = LoadTodosAction | RemoveTodoAction\n| SelectUserIdAction | LoadUserAction;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  Actions, ActionsType, RootState,\n} from './types';\n\nconst initialState: RootState = {\n  todos: [],\n  selectedUserId: 0,\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionsType.LoadTodos:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionsType.DeleteTodo:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    case ActionsType.SelectUserId:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case ActionsType.LoadUser:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import { Todo } from '../types/todo';\nimport { User } from '../types/user';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (endpoint: string, options = {}) => {\n  return fetch(BASE_URL + endpoint, options)\n    .then(response => response.json())\n    .then(data => {\n      if (data.Error) {\n        throw new Error(`${data.status} - ${data.statusText}`);\n      }\n\n      return data;\n    });\n};\n\nexport const fetchTodos = (): Promise<Todo[]> => request('/todos');\nexport const fetchUserById = (userId: number): Promise<User> => request(`/users/${userId}`);\nexport const removeTodo = (todoId: number): Promise<number> => request(`/todos/${todoId}`, {\n  method: 'DELETE',\n});\n","import { Todo } from '../types/todo';\nimport { User } from '../types/user';\nimport {\n  ActionsType, LoadTodosAction, LoadUserAction, RemoveTodoAction,\n  SelectUserIdAction,\n} from './types';\n\nexport const todosAction = (payload: Todo[]): LoadTodosAction => ({\n  type: ActionsType.LoadTodos,\n  payload,\n});\n\nexport const removeTodoAction = (payload: number): RemoveTodoAction => ({\n  type: ActionsType.DeleteTodo,\n  payload,\n});\n\nexport const selectUserIdAction = (payload: number): SelectUserIdAction => ({\n  type: ActionsType.SelectUserId,\n  payload,\n});\n\nexport const userAction = (payload: User): LoadUserAction => ({\n  type: ActionsType.LoadUser,\n  payload,\n});\n","import { RootState } from './types';\n\nexport const todosSelector = (state: RootState) => state.todos;\nexport const selectedUserIdSelector\n  = (state: RootState) => state.selectedUserId;\nexport const userSelector = (state: RootState) => state.user;\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Option {\n  id: number,\n  name: string,\n}\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  options: Option[],\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const SelectInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, options, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor=\"todo\" className=\"label\">\n        {label}\n        <div className=\"control\">\n          <div className={classNames('select', { 'is-danger': errorMessage })}>\n            <select\n              id={name}\n              name={name}\n              value={inputValue}\n              onChange={onChange}\n            >\n              {options.map(option => (\n                <option key={option.id} value={option.name}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  placeholder: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const TextInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, placeholder, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name={name}\n            id={name}\n            placeholder={placeholder}\n            className={classNames('input', { 'is-danger': errorMessage })}\n            value={inputValue}\n            onChange={onChange}\n          />\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import classNames from 'classnames';\nimport {\n  FC, useEffect, useMemo, useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTodos, removeTodo } from '../../api/api';\nimport {\n  removeTodoAction, selectUserIdAction, todosAction,\n} from '../../store/actions';\nimport { selectedUserIdSelector, todosSelector } from '../../store/selectors';\nimport { SelectInput } from '../InputComponents/SelectInput';\nimport { TextInput } from '../InputComponents/TextInput';\nimport './todoList.scss';\n\nexport const TodoList: FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(todosSelector);\n  const selectedUserId = useSelector(selectedUserIdSelector);\n\n  const [title, setTitle] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  useEffect(() => {\n    fetchTodos().then(todosFromServer => {\n      dispatch(todosAction(todosFromServer));\n    });\n  }, []);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const eraseTodo = (todoId: number) => {\n    removeTodo(todoId).then(id => {\n      if (id) {\n        dispatch(removeTodoAction(todoId));\n      }\n    });\n  };\n\n  const options = [\n    { id: 1, name: 'all' },\n    { id: 2, name: 'active' },\n    { id: 3, name: 'completed' },\n  ];\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return todo.completed === false;\n          case 'completed':\n            return todo.completed === true;\n          case 'all':\n          default:\n            return todo;\n        }\n      })\n  ), [todos, title, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"title\">Todos:</h2>\n\n      <TextInput\n        name=\"title\"\n        label=\"\"\n        inputValue={title}\n        errorMessage=\"\"\n        placeholder=\"Search by title\"\n        onChange={handleInputChange}\n      />\n\n      <SelectInput\n        name=\"filter\"\n        label=\"\"\n        inputValue={selectedOption}\n        errorMessage=\"\"\n        options={options}\n        onChange={handleSelectChange}\n      />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => dispatch(selectUserIdAction(todo.userId))}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"TodoList__user-button\"\n                  type=\"button\"\n                  onClick={() => eraseTodo(todo.id)}\n                >\n                  {`Delete #${todo.id}`}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUserById } from '../../api/api';\nimport { selectUserIdAction, userAction } from '../../store/actions';\nimport { selectedUserIdSelector, userSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = memo(() => {\n  const dispatch = useDispatch();\n  const user = useSelector(userSelector);\n  const selectedUserId = useSelector(selectedUserIdSelector);\n\n  useEffect(() => {\n    fetchUserById(selectedUserId)\n      .then(person => dispatch(userAction(person)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => dispatch(selectUserIdAction(0))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport 'bulma';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { selectedUserIdSelector } from './store/selectors';\n\nconst App = () => {\n  const selectedUserId = useSelector(selectedUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}